public class Back_1260DFS와_BFS {
    static ArrayList<Integer> dfsArr,bfsArr;

    static int[] bfsCh,dfsCh;

    static int cnt=0;
    static ArrayList<ArrayList<Integer>> graph;

    static Queue<Integer> Q = new LinkedList<>();


    public void DFS(int V, int N) {
        if(cnt==N) return;

        ArrayList<Integer> point = graph.get(V);

        for(int i=0; i<point.size(); i++) {
            int x = point.get(i);
            if(dfsCh[x]==0) {
                dfsCh[x]=1;
                dfsArr.add(x);
                DFS(x,N);
            }
        }

    }

    public void BFS(int V, int N) {
        Q.offer(V);
        int cnt = 1;
        while (!Q.isEmpty()) {
            int len = Q.size();
            for(int i=0; i<len; i++) {
                int x = Q.poll();
                ArrayList<Integer> point = graph.get(x);
                for(int j=0; j<point.size(); j++) {
                    int nx = point.get(j);
                    if(cnt==N) return;
                    if(bfsCh[nx]==0) {
                        bfsCh[nx]=1;
                        Q.offer(nx);
                        bfsArr.add(nx);
                    }
                }
            }
            cnt++;
        }

    }


    public static void main(String[] args) throws IOException {
        Back_1260DFS와_BFS T = new Back_1260DFS와_BFS();

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int V = Integer.parseInt(st.nextToken());

        graph = new ArrayList<>();

        for(int i=0; i<=N; i++) {
            graph.add(new ArrayList<>());
        }

        dfsCh =new int[N+1];
        dfsCh[V] = 1;
        bfsCh =new int[N+1];
        bfsCh[V] = 1;

        for(int i=0; i<M; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph.get(a).add(b);
            graph.get(b).add(a);
        }

        for(int i=0; i<graph.size(); i++) {
            Collections.sort(graph.get(i));
        }

        dfsArr = new ArrayList<>();
        bfsArr = new ArrayList<>();

        dfsArr.add(V);
        bfsArr.add(V);

        T.DFS(V, N);
        T.BFS(V, N);

        for(int x : dfsArr) {
            System.out.print(x + " ");
        }
        System.out.println();
        for(int x: bfsArr) {
            System.out.print(x + " ");
        }
    }
}
